// src/strategies/arbitrage.js

import { calculateProfit } from '../utils/calculateProfit.js'; // Імпортуємо функцію для розрахунку прибутку

// Логіка для обчислення прибутку по арбітражним парам
export const calculateArbitrageProfit = (prices) => {
  const workingСapital = 25; // Приклад початкової суми
  
  
  // Торгові пари для арбітражу
  const pairs = [
    // Прямі пари
    // Нові готові пари
    { pairName: "BTC→ETH→USDT", first: {symbol:"BTCUSDT"}, second:{symbol: "ETHBTC"}, third:{symbol:"ETHUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BTCUSDT'], pricesSecondCoin: prices['ETHUSDT'], pricesCoinToCoin: prices['ETHBTC'], firstSymbol: "BTCUSDT", secondSymbol: "ETHBTC", firstQuantity: 0.00001, secondQuantity: 0.0001, thirdQuantity: 0.0001})},
    { pairName: "BTC→BNB→USDT", first: {symbol:"BTCUSDT"}, second:{symbol:"BNBBTC"}, third:{symbol:"BNBUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BTCUSDT'], pricesSecondCoin: prices['BNBUSDT'], pricesCoinToCoin: prices['BNBBTC'], firstSymbol: "BTCUSDT", secondSymbol: "BNBBTC", firstQuantity: 0.00001, secondQuantity: 0.001, thirdQuantity: 0.001})},
    { pairName: "BTC→XRP→USDT", first: {symbol:"BTCUSDT"}, second:{symbol:"XRPBTC"}, third:{symbol:"XRPUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BTCUSDT'], pricesSecondCoin: prices['XRPUSDT'], pricesCoinToCoin: prices['XRPBTC'], firstSymbol: "BTCUSDT", secondSymbol: "XRPBTC", firstQuantity: 0.00001, secondQuantity: 1, thirdQuantity: 1})},
    { pairName: "BTC→DOT→USDT", first: {symbol:"BTCUSDT"}, second:{symbol: "DOTBTC"}, third:{symbol:"DOTUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BTCUSDT'], pricesSecondCoin: prices['DOTUSDT'], pricesCoinToCoin: prices['DOTBTC'], firstSymbol: "BTCUSDT", secondSymbol: "DOTBTC", firstQuantity: 0.00001, secondQuantity: 0.01, thirdQuantity: 0.01})},
    { pairName: "BTC→SOL→USDT", first: {symbol: "BTCUSDT"}, second: {symbol: "SOLBTC"}, third:{symbol:"SOLUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BTCUSDT'], pricesSecondCoin: prices['SOLUSDT'], pricesCoinToCoin: prices['SOLBTC'], firstSymbol: "BTCUSDT", secondSymbol: "SOLBTC", firstQuantity: 0.00001, secondQuantity: 0.001, thirdQuantity: 0.001 })},
    { pairName: "BTC→ADA→USDT", first: {symbol:"BTCUSDT"}, second:{symbol: "ADABTC"}, third:{symbol:"SOLUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BTCUSDT'], pricesSecondCoin: prices['ADAUSDT'], pricesCoinToCoin: prices['ADABTC'], firstSymbol: "BTCUSDT", secondSymbol: "ADABTC", firstQuantity: 0.00001, secondQuantity: 0.1, thirdQuantity: 0.1 })},
    { pairName: "BTC→TRX→USDT", first: {symbol: "BTCUSDT"}, second: {symbol: "TRXBTC"}, third:{symbol:"TRXUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BTCUSDT'], pricesSecondCoin: prices['TRXUSDT'], pricesCoinToCoin: prices['TRXBTC'], firstSymbol: "BTCUSDT", secondSymbol: "TRXBTC", firstQuantity: 0.00001, secondQuantity: 1, thirdQuantity: 0.1 })},
    { pairName: "BTC→AVAX→USDT", first: {symbol: "BTCUSDT"}, second: { symbol: "AVAXBTC"}, third:{symbol:"AVAXUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BTCUSDT'], pricesSecondCoin: prices['AVAXUSDT'], pricesCoinToCoin: prices['AVAXBTC'], firstSymbol: "BTCUSDT", secondSymbol: "AVAXBTC", firstQuantity: 0.00001, secondQuantity: 0.01, thirdQuantity: 0.01 })},
    { pairName: "BTC→SUI→USDT", first: {symbol: "BTCUSDT"}, second: {symbol: "SUIBTC"}, third:{symbol:"SUIUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BTCUSDT'], pricesSecondCoin: prices['SUIUSDT'], pricesCoinToCoin: prices['SUIBTC'], firstSymbol: "BTCUSDT", secondSymbol: "SUIBTC", firstQuantity: 0.00001, secondQuantity: 0.1, thirdQuantity: 0.1  }) },
    { pairName: "BTC→LINK→USDT", first: {symbol:"BTCUSDT"}, second: {symbol: "LINKBTC"}, third:{symbol:"SUIUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BTCUSDT'], pricesSecondCoin: prices['LINKUSDT'], pricesCoinToCoin: prices['LINKBTC'], firstSymbol: "BTCUSDT", secondSymbol: "LINKBTC", firstQuantity: 0.00001, secondQuantity: 0.01, thirdQuantity: 0.01 }) },
    { pairName: "BTC→TON→USDT", first: { symbol: "BTCUSDT"}, second: { symbol: "TONBTC" }, third:{symbol:"TONUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BTCUSDT'], pricesSecondCoin: prices['TONUSDT'], pricesCoinToCoin: prices['TONBTC'], firstSymbol: "BTCUSDT", secondSymbol: "TONBTC", firstQuantity: 0.00001, secondQuantity: 0.01, thirdQuantity: 0.01 }) },
    { pairName: "BTC→DOGE→USDT", first: {symbol:"BTCUSDT"}, second: {symbol: "DOGEBTC"}, third:{symbol:"DOGEUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BTCUSDT'], pricesSecondCoin: prices['DOGEUSDT'], pricesCoinToCoin: prices['DOGEBTC'], firstSymbol: "BTCUSDT", secondSymbol: "DOGEBTC", firstQuantity: 0.00001, secondQuantity: 1, thirdQuantity: 1 }) },
    
    { pairName: "BTC→XLM→USDT", first: { symbol: "BTCUSDT" }, second: { symbol: "XLMBTC" }, third: { symbol: "XMLUSDT" }, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BTCUSDT'], pricesSecondCoin: prices['XLMUSDT'], pricesCoinToCoin: prices['XLMBTC'], firstSymbol: "BTCUSDT", secondSymbol: "XLMBTC", firstQuantity: 0.00001, secondQuantity: 1, thirdQuantity: 1 }) },
    { pairName: "BTC→WBTC→USDT", first: { symbol:"BTCUSDT"}, second: {symbol:"WBTCBTC"}, third:{symbol:"WBTCUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BTCUSDT'], pricesSecondCoin: prices['WBTCUSDT'], pricesCoinToCoin: prices['WBTCBTC'], firstSymbol: "BTCUSDT", secondSymbol: "WBTCBTC", firstQuantity: 0.00001, secondQuantity: 0.00001, thirdQuantity: 0.00001 }) },
    { pairName: "BTC→HBAR→USDT", first: {symbol:"BTCUSDT"}, second: {symbol:"HBARBTC"}, third:{symbol:"HBARUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BTCUSDT'], pricesSecondCoin: prices['HBARUSDT'], pricesCoinToCoin: prices['HBARBTC'], firstSymbol: "BTCUSDT", secondSymbol: "HBARBTC", firstQuantity: 0.00001, secondQuantity: 1, thirdQuantity: 1 }) },
    { pairName: "BTC→BCH→USDT", first: {symbol:"BTCUSDT"}, second: {symbol: "BCHBTC"}, third:{symbol:"BCHUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BTCUSDT'], pricesSecondCoin: prices['BCHUSDT'], pricesCoinToCoin: prices['BCHBTC'], firstSymbol: "BTCUSDT", secondSymbol: "BCHBTC", firstQuantity: 0.00001, secondQuantity: 0.001 , thirdQuantity: 0.001 }) },
    { pairName: "BTC→UNI→USDT", first: {symbol:"BTCUSDT"}, second: {symbol:"UNIBTC"}, third:{symbol:"UNIUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BTCUSDT'], pricesSecondCoin: prices['UNIUSDT'], pricesCoinToCoin: prices['UNIBTC'], firstSymbol: "BTCUSDT", secondSymbol: "UNIBTC", firstQuantity: 0.00001, secondQuantity: 0.01 , thirdQuantity: 0.01 }) },
    { pairName: "BTC→LTC→USDT", first: {symbol:"BTCUSDT"}, second: {symbol:"LTCBTC"}, third:{symbol:"LTCUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BTCUSDT'], pricesSecondCoin: prices['LTCUSDT'], pricesCoinToCoin: prices['LTCBTC'], firstSymbol: "BTCUSDT", secondSymbol: "LTCBTC", firstQuantity: 0.00001, secondQuantity: 0.001, thirdQuantity: 0.001 }) },
    { pairName: "BTC→NEAR→USDT", first: {symbol:"BTCUSDT"}, second: {symbol:"NEARBTC"}, third:{symbol:"NEARUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BTCUSDT'], pricesSecondCoin: prices['NEARUSDT'], pricesCoinToCoin: prices['NEARBTC'], firstSymbol: "BTCUSDT", secondSymbol: "NEARBTC", firstQuantity: 0.00001, secondQuantity: 0.1, thirdQuantity: 0.1 }) },
    { pairName: "BTC→ICP→USDT", first: {symbol:"BTCUSDT"}, second: {symbol:"ICPBTC"}, third:{symbol:"ICPUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BTCUSDT'], pricesSecondCoin: prices['ICPUSDT'], pricesCoinToCoin: prices['ICPBTC'], firstSymbol: "BTCUSDT", secondSymbol: "ICPBTC", firstQuantity: 0.00001, secondQuantity: 0.01, thirdQuantity: 0.01 }) },
    { pairName: "BTC→APT→USDT", first: {symbol:"BTCUSDT"}, second: {symbol:"APTBTC"}, third:{symbol:"APTUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BTCUSDT'], pricesSecondCoin: prices['APTUSDT'], pricesCoinToCoin: prices['APTBTC'], firstSymbol: "BTCUSDT", secondSymbol: "APTBTC", firstQuantity: 0.00001, secondQuantity: 0.01, thirdQuantity: 0.01 }) },
    { pairName: "BTC→AAVE→USDT", first: {symbol:"BTCUSDT"}, second: {symbol:"AAVEBTC"}, third:{symbol:"AAVEUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BTCUSDT'], pricesSecondCoin: prices['AAVEUSDT'], pricesCoinToCoin: prices['AAVEBTC'], firstSymbol: "BTCUSDT", secondSymbol: "AAVEBTC", firstQuantity: 0.00001, secondQuantity: 0.001, thirdQuantity: 0.001 }) },
    { pairName: "BTC→POL→USDT", first: {symbol:"BTCUSDT"}, second: {symbol:"POLBTC"}, third:{symbol:"POLUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BTCUSDT'], pricesSecondCoin: prices['POLUSDT'], pricesCoinToCoin: prices['POLBTC'], firstSymbol: "BTCUSDT", secondSymbol: "POLBTC", firstQuantity: 0.00001, secondQuantity: 0.1, thirdQuantity: 0.1 }) },
    { pairName: "BTC→ETC→USDT", first: {symbol:"BTCUSDT"}, second: {symbol:"ECTBTC"}, third:{symbol:"ECTUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["BTCUSDT"], pricesSecondCoin: prices["ETCUSDT"], pricesCoinToCoin: prices['ETCBTC'], firstSymbol: "BTCUSDT", secondSymbol: "ETCBTC", firstQuantity: 0.00001, secondQuantity: 0.01, thirdQuantity: 0.01 }) },
    { pairName: "BTC→RENDER→USDT", first: {symbol:"BTCUSDT"}, second: {symbol:"RENDERBTC"}, third:{symbol:"RENDERUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["BTCUSDT"], pricesSecondCoin: prices["RENDERUSDT"], pricesCoinToCoin: prices['RENDERBTC'], firstSymbol: "BTCUSDT", secondSymbol: "RENDERBTC", firstQuantity: 0.00001, secondQuantity: 0.01, thirdQuantity: 0.01 }) },
    { pairName: "BTC→VET→USDT", first: {symbol:"BTCUSDT"}, second: {symbol:"VETBTC"}, third:{symbol:"VETUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["BTCUSDT"], pricesSecondCoin: prices["VETUSDT"], pricesCoinToCoin: prices['VETBTC'], firstSymbol: "BTCUSDT", secondSymbol: "VETBTC", firstQuantity: 0.00001, secondQuantity: 1, thirdQuantity: 0.1 }) },
    { pairName: "BTC→ENA→USDT", first: {symbol:"BTCUSDT"}, second: {symbol:"ENABTC"}, third:{symbol:"ENAUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["BTCUSDT"], pricesSecondCoin: prices["ENAUSDT"], pricesCoinToCoin: prices['ENABTC'], firstSymbol: "BTCUSDT", secondSymbol: "ENABTC", firstQuantity: 0.00001, secondQuantity: 0.01, thirdQuantity: 0.01 }) },
    { pairName: "BTC→OM→USDT", first: {symbol:"BTCUSDT"}, second: {symbol:"OMBTC"}, third:{symbol:"OMUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["BTCUSDT"], pricesSecondCoin: prices["OMUSDT"], pricesCoinToCoin: prices['OMBTC'], firstSymbol: "BTCUSDT", secondSymbol: "OMBTC", firstQuantity: 0.00001, secondQuantity: 1, thirdQuantity: 1  }) },
    { pairName: "BTC→FIL→USDT", first: {symbol:"BTCUSDT"}, second: {symbol:"FILBTC"}, third:{symbol:"FILUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["BTCUSDT"], pricesSecondCoin: prices["FILUSDT"], pricesCoinToCoin: prices['FILBTC'], firstSymbol: "BTCUSDT", secondSymbol: "FILBTC", firstQuantity: 0.00001, secondQuantity: 0.01, thirdQuantity: 0.01 }) },
    { pairName: "BTC→ALGO→USDT", first: {symbol:"BTCUSDT"}, second: {symbol:"ALGOBTC"}, third:{symbol:"ALGOUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["BTCUSDT"], pricesSecondCoin: prices["ALGOUSDT"], pricesCoinToCoin: prices['ALGOBTC'], firstSymbol: "BTCUSDT", secondSymbol: "ALGOBTC", firstQuantity: 0.00001, secondQuantity: 1, thirdQuantity: 1 }) },
    { pairName: "BTC→ATOM→USDT", first: {symbol:"BTCUSDT"}, second: { symbol:"ATOMBTC"},  third:{symbol:"ATOMUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["BTCUSDT"], pricesSecondCoin: prices["ATOMUSDT"], pricesCoinToCoin: prices['ATOMBTC'], firstSymbol: "BTCUSDT", secondSymbol: "ATOMBTC", firstQuantity: 0.00001, secondQuantity: 0.01, thirdQuantity: 0.01 }) },
    { pairName: "BTC→OP→USDT", first: {symbol:"BTCUSDT"}, second: {symbol:"OPBTC"}, third:{symbol:"OPUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["BTCUSDT"], pricesSecondCoin: prices["OPUSDT"], pricesCoinToCoin: prices['OPBTC'], firstSymbol: "BTCUSDT", secondSymbol: "OPBTC", firstQuantity: 0.00001, secondQuantity: 0.01, thirdQuantity: 0.01 }) },
    { pairName: "BTC→STX→USDT", first: {symbol:"BTCUSDT"}, second: {symbol:"STXBTC"}, third:{symbol:"STXUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["BTCUSDT"], pricesSecondCoin: prices["STXUSDT"], pricesCoinToCoin: prices['STXBTC'], firstSymbol: "BTCUSDT", secondSymbol: "STXBTC", firstQuantity: 0.00001, secondQuantity: 0.1, thirdQuantity: 0.1 }) },
    { pairName: "BTC→TIA→USDT", first: {symbol:"BTCUSDT"}, second: {symbol:"TIABTC"}, third:{symbol:"TIAUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["BTCUSDT"], pricesSecondCoin: prices["TIAUSDT"], pricesCoinToCoin: prices['TIABTC'], firstSymbol: "BTCUSDT", secondSymbol: "TIABTC", firstQuantity: 0.00001, secondQuantity: 0.01, thirdQuantity: 0.01 }) },
    { pairName: "BTC→INJ→USDT", first: {symbol:"BTCUSDT"}, second: {symbol:"INJBTC"}, third:{symbol:"INJUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["BTCUSDT"], pricesSecondCoin: prices["INJUSDT"], pricesCoinToCoin: prices['INJBTC'], firstSymbol: "BTCUSDT", secondSymbol: "INJBTC", firstQuantity: 0.00001, secondQuantity: 0.01, thirdQuantity: 0.01 }) },
    { pairName: "BTC→THETA→USDT", first: {symbol:"BTCUSDT"}, second: {symbol:"THETABTC"}, third:{symbol:"INJUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["BTCUSDT"], pricesSecondCoin: prices["THETAUSDT"], pricesCoinToCoin: prices['THETABTC'], firstSymbol: "BTCUSDT", secondSymbol: "THETABTC", firstQuantity: 0.00001, secondQuantity: 0.1, thirdQuantity: 0.1 }) },
    { pairName: "BTC→IMX→USDT", first: {symbol:"BTCUSDT"}, second: {symbol:"IMXBTC"}, third:{symbol:"IMXUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["BTCUSDT"], pricesSecondCoin: prices["IMXUSDT"], pricesCoinToCoin: prices['IMXBTC'], firstSymbol: "BTCUSDT", secondSymbol: "IMXBTC", firstQuantity: 0.00001, secondQuantity: 0.01, thirdQuantity: 0.01 }) },
    { pairName: "BTC→MOVE→USDT", first: {symbol:"BTCUSDT"}, second: {symbol:"MOVEBTC"}, third:{symbol:"MOVEUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["BTCUSDT"], pricesSecondCoin: prices["MOVEUSDT"], pricesCoinToCoin: prices['MOVEBTC'], firstSymbol: "BTCUSDT", secondSymbol: "MOVEBTC", firstQuantity: 0.00001, secondQuantity: 0.1, thirdQuantity: 0.1 }) },
    { pairName: "BTC→GRT→USDT", first: {symbol:"BTCUSDT"}, second: {symbol:"GRTBTC"}, third:{symbol:"GRTUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["BTCUSDT"], pricesSecondCoin: prices["GRTUSDT"], pricesCoinToCoin: prices['GRTBTC'], firstSymbol: "BTCUSDT", secondSymbol: "GRTBTC", firstQuantity: 0.00001, secondQuantity: 1, thirdQuantity: 1 }) },
    { pairName: "BTC→WLD→USDT", first: {symbol:"BTCUSDT"}, second: {symbol:"WLDBTC"}, third:{symbol:"WLDUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["BTCUSDT"], pricesSecondCoin: prices["WLDUSDT"], pricesCoinToCoin: prices['WLDBTC'], firstSymbol: "BTCUSDT", secondSymbol: "WLDBTC", firstQuantity: 0.00001, secondQuantity: 0.1, thirdQuantity: 0.1 }) },
    { pairName: "BTC→WIF→USDT", first: {symbol:"BTCUSDT"}, second: {symbol:"WIFBTC"}, third:{symbol:"WIFUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["BTCUSDT"], pricesSecondCoin: prices["WIFUSDT"], pricesCoinToCoin: prices['WIFBTC'], firstSymbol: "BTCUSDT", secondSymbol: "WLDBTC", firstQuantity: 0.00001, secondQuantity: 0.01, thirdQuantity: 0.01 }) },
    { pairName: "BTC→SEI→USDT", first: {symbol:"BTCUSDT"}, second: {symbol:"SEIBTC"}, third:{symbol:"SEIUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["BTCUSDT"], pricesSecondCoin: prices["SEIUSDT"], pricesCoinToCoin: prices['SEIBTC'], firstSymbol: "BTCUSDT", secondSymbol: "SEIBTC", firstQuantity: 0.00001, secondQuantity: 0.1, thirdQuantity: 0.1 }) },
    { pairName: "BTC→LDO→USDT", first: {symbol:"BTCUSDT"}, second: {symbol:"LDOBTC"}, third:{symbol:"LDOUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["BTCUSDT"], pricesSecondCoin: prices["LDOUSDT"], pricesCoinToCoin: prices['LDOBTC'], firstSymbol: "BTCUSDT", secondSymbol: "LDOBTC", firstQuantity: 0.00001, secondQuantity: 0.01, thirdQuantity: 0.01 }) },
    { pairName: "BTC→SAND→USDT", first: { symbol: "BTCUSDT" }, second: { symbol: "SANDBTC" }, third:{symbol:"SANDUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["BTCUSDT"], pricesSecondCoin: prices["SANDUSDT"], pricesCoinToCoin: prices['SANDBTC'], firstSymbol: "BTCUSDT", secondSymbol: "SANDBTC", firstQuantity: 0.00001, secondQuantity: 1, thirdQuantity: 1  }) },

    { pairName: "ETH→BNB→USDT", first: {symbol:"ETHUSDT"}, second: {symbol:"BNBETH"}, third:{symbol:"BNBUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['ETHUSDT'], pricesSecondCoin: prices['BNBUSDT'], pricesCoinToCoin: prices['BNBETH'], firstSymbol: "ETHUSDT", secondSymbol: "BNBETH'", firstQuantity: 0.0001, secondQuantity: 0.001, thirdQuantity: 0.001 }) },
    { pairName: "ETH→XRP→USDT", first: {symbol:"ETHUSDT"}, second: {symbol:"XRPETH"}, third:{symbol:"XRPUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['ETHUSDT'], pricesSecondCoin: prices['XRPUSDT'], pricesCoinToCoin: prices['XRPETH'], firstSymbol: "ETHUSDT", secondSymbol: "XRPETH'", firstQuantity: 0.0001, secondQuantity: 1, thirdQuantity: 1 }) },
    { pairName: "ETH→DOT→USDT", first: {symbol:"ETHUSDT"}, second: {symbol:"DOTETH"}, third:{symbol:"DOTUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['ETHUSDT'], pricesSecondCoin: prices['DOTUSDT'], pricesCoinToCoin: prices['DOTETH'], firstSymbol: "ETHUSDT", secondSymbol: "DOTETH'", firstQuantity: 0.0001, secondQuantity: 0.01, thirdQuantity: 0.01 }) },
    { pairName: "ETH→SOL→USDT", first: {symbol:"ETHUSDT"}, second: {symbol:"SOLETH"}, third:{symbol:"SOLUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['ETHUSDT'], pricesSecondCoin: prices['SOLUSDT'], pricesCoinToCoin: prices['SOLETH'], firstSymbol: "ETHUSDT", secondSymbol: "SOLETH'", firstQuantity: 0.0001, secondQuantity: 0.001, thirdQuantity: 0.001 }) },
    { pairName: "ETH→ADA→USDT", first: {symbol:"ETHUSDT"}, second: {symbol:"ADAETH"}, third:{symbol:"ADAUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['ETHUSDT'], pricesSecondCoin: prices['ADAUSDT'], pricesCoinToCoin: prices['ADAETH'], firstSymbol: "ETHUSDT", secondSymbol: "ADAETH'", firstQuantity: 0.0001, secondQuantity: 0.1, thirdQuantity: 0.1 }) },
    { pairName: "ETH→TRX→USDT", first: {symbol:"ETHUSDT"}, second: {symbol:"TRXETH"}, third:{symbol:"TRXUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['ETHUSDT'], pricesSecondCoin: prices['TRXUSDT'], pricesCoinToCoin: prices['TRXETH'], firstSymbol: "ETHUSDT", secondSymbol: "TRXETH'", firstQuantity: 0.0001, secondQuantity: 1, thirdQuantity: 0.1 }) },
    { pairName: "ETH→AVAX→USDT", first: {symbol:"ETHUSDT"}, second: {symbol:"AVAXETH"}, third:{symbol:"AVAXUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['ETHUSDT'], pricesSecondCoin: prices['AVAXUSDT'], pricesCoinToCoin: prices['AVAXETH'], firstSymbol: "ETHUSDT", secondSymbol: "AVAXETH'", firstQuantity: 0.0001, secondQuantity: 0.01, thirdQuantity: 0.01 }) },
    { pairName: "ETH→LINK→USDT", first: {symbol:"ETHUSDT"}, second: {symbol:"LINKETH"}, third:{symbol:"LINKUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['ETHUSDT'], pricesSecondCoin: prices['LINKUSDT'], pricesCoinToCoin: prices['LINKETH'], firstSymbol: "ETHUSDT", secondSymbol: "LINKETH'", firstQuantity: 0.0001, secondQuantity: 0.01, thirdQuantity: 0.01 }) },
    { pairName: "ETH→XLM→USDT", first: {symbol:"ETHUSDT"}, second: {symbol:"XLMETH"}, third:{symbol:"XLMUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['ETHUSDT'], pricesSecondCoin: prices['XLMUSDT'], pricesCoinToCoin: prices['XLMETH'], firstSymbol: "ETHUSDT", secondSymbol: "XLMETH'", firstQuantity: 0.0001, secondQuantity: 1, thirdQuantity: 1 }) },
    { pairName: "ETH→WBTC→USDT", first: {symbol:"ETHUSDT"}, second: {symbol:"WBTCETH"}, third:{symbol:"WBTCUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['ETHUSDT'], pricesSecondCoin: prices['WBTCUSDT'], pricesCoinToCoin: prices['WBTCETH'], firstSymbol: "ETHUSDT", secondSymbol: "WBTCETH'", firstQuantity: 0.0001, secondQuantity: 0.00001, thirdQuantity: 0.00001 }) },
    { pairName: "ETH→UNI→USDT", first: {symbol:"ETHUSDT"}, second: {symbol:"UNIETH"}, third:{symbol:"UNIUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['ETHUSDT'], pricesSecondCoin: prices['UNIUSDT'], pricesCoinToCoin: prices['UNIETH'], firstSymbol: "ETHUSDT", secondSymbol: "UNIETH'", firstQuantity: 0.0001, secondQuantity: 0.001, thirdQuantity: 0.01 }) },
    { pairName: "ETH→LTC→USDT", first: {symbol:"ETHUSDT"}, second: {symbol:"LTCETH"}, third:{symbol:"LTCUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['ETHUSDT'], pricesSecondCoin: prices['LTCUSDT'], pricesCoinToCoin: prices['LTCETH'], firstSymbol: "ETHUSDT", secondSymbol: "LTCETH'", firstQuantity: 0.0001, secondQuantity: 0.001, thirdQuantity: 0.001 }) },
    { pairName: "ETH→NEAR→USDT", first: {symbol:"ETHUSDT"}, second: {symbol:"NEARETH"}, third:{symbol:"NEARUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['ETHUSDT'], pricesSecondCoin: prices['NEARUSDT'], pricesCoinToCoin: prices['NEARETH'], firstSymbol: "ETHUSDT", secondSymbol: "NEARETH'", firstQuantity: 0.0001, secondQuantity: 0.001, thirdQuantity: 0.1 }) },
    { pairName: "ETH→ICP→USDT", first: {symbol:"ETHUSDT"}, second: {symbol:"ICPETH"}, third:{symbol:"ICPUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["ETHUSDT"], pricesSecondCoin: prices["ICPUSDT"], pricesCoinToCoin: prices['ICPETH'], firstSymbol: "ETHUSDT", secondSymbol: "ICPETH'", firstQuantity: 0.0001, secondQuantity: 0.001, thirdQuantity: 0.01 }) },
    { pairName: "ETH→APT→USDT", first: {symbol:"ETHUSDT"}, second: {symbol:"APTETH"}, third:{symbol:"APTUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["ETHUSDT"], pricesSecondCoin: prices["APTUSDT"], pricesCoinToCoin: prices['APTETH'], firstSymbol: "ETHUSDT", secondSymbol: "APTETH'", firstQuantity: 0.0001, secondQuantity: 0.01, thirdQuantity: 0.01 }) },
    { pairName: "ETH→AAVE→USDT", first: {symbol:"ETHUSDT"}, second: { symbol: "AAVEETH"}, third:{symbol:"AAVEUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["ETHUSDT"], pricesSecondCoin: prices["AAVEUSDT"], pricesCoinToCoin: prices['AAVEETH'], firstSymbol: "ETHUSDT", secondSymbol: "AAVEETH'", firstQuantity: 0.0001, secondQuantity: 0.001, thirdQuantity: 0.001 }) },
    { pairName: "ETH→POL→USDT", first: {symbol:"ETHUSDT"}, second: {symbol:"POLETH"}, third:{symbol:"AAVEUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["ETHUSDT"], pricesSecondCoin: prices["POLUSDT"], pricesCoinToCoin: prices['POLETH'], firstSymbol: "ETHUSDT", secondSymbol: "POLETH'", firstQuantity: 0.0001, secondQuantity: 0.1, thirdQuantity: 0.1  }) },
    { pairName: "ETH→ETC→USDT", first: {symbol:"ETHUSDT"}, second: {symbol:"ETCETH"}, third:{symbol:"ETCUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["ETHUSDT"], pricesSecondCoin: prices["ETCUSDT"], pricesCoinToCoin: prices['ETCETH'], firstSymbol: "ETHUSDT", secondSymbol: "ETCETH'", firstQuantity: 0.0001, secondQuantity: 0.01, thirdQuantity: 0.01 }) },
    { pairName: "ETH→VET→USDT", first: {symbol:"ETHUSDT"}, second: {symbol:"VETETH"},  third:{symbol:"VETUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["ETHUSDT"], pricesSecondCoin: prices["VETUSDT"], pricesCoinToCoin: prices['VETETH'], firstSymbol: "ETHUSDT", secondSymbol: "VETETH'", firstQuantity: 0.0001, secondQuantity: 1, thirdQuantity: 0.1 }) },
    { pairName: "ETH→FIL→USDT", first: {symbol:"ETHUSDT"}, second: {symbol:"FILETH"}, third:{symbol:"FILUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["ETHUSDT"], pricesSecondCoin: prices["FILUSDT"], pricesCoinToCoin: prices['FILETH'], firstSymbol: "ETHUSDT", secondSymbol: "FILETH'", firstQuantity: 0.0001, secondQuantity: 0.01, thirdQuantity: 0.01 }) },
    { pairName: "ETH→OP→USDT", first: {symbol:"ETHUSDT"}, second: {symbol:"OPETH"}, third:{symbol:"OPUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["ETHUSDT"], pricesSecondCoin: prices["OPUSDT"], pricesCoinToCoin: prices['OPETH'], firstSymbol: "ETHUSDT", secondSymbol: "OPETH'", firstQuantity: 0.0001, secondQuantity: 0.01, thirdQuantity: 0.01 }) },
    { pairName: "ETH→INJ→USDT", first: {symbol:"ETHUSDT"}, second: {symbol:"INJETH"}, third:{symbol:"INJUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["ETHUSDT"], pricesSecondCoin: prices["INJUSDT"], pricesCoinToCoin: prices['INJETH'], firstSymbol: "ETHUSDT", secondSymbol: "INJETH'", firstQuantity: 0.0001, secondQuantity: 0.01, thirdQuantity: 0.01 }) },
    { pairName: "ETH→GRT→USDT", first: {symbol:"ETHUSDT"}, second: {symbol:"GRTETH"}, third:{symbol:"GRTUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["ETHUSDT"], pricesSecondCoin: prices["GRTUSDT"], pricesCoinToCoin: prices['GRTETH'], firstSymbol: "ETHUSDT", secondSymbol: "GRTETH'", firstQuantity: 0.0001, secondQuantity: 1, thirdQuantity: 1 }) },
    
    { pairName: "BNB→XRP→USDT", first: { symbol: "BNBUSDT"}, second: { symbol: "XRPBNB"}, third:{symbol:"XRPUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BNBUSDT'], pricesSecondCoin: prices['XRPUSDT'], pricesCoinToCoin: prices['XRPBNB'], firstSymbol: "BNBUSDT", secondSymbol: "XRPBNB'", firstQuantity: 0.001, secondQuantity: 1, thirdQuantity: 1 }) },
    { pairName: "BNB→DOT→USDT", first: { symbol: "BNBUSDT"}, second: { symbol: "DOTBNB"}, third:{symbol:"DOTUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BNBUSDT'], pricesSecondCoin: prices['DOTUSDT'], pricesCoinToCoin: prices['DOTBNB'], firstSymbol: "BNBUSDT", secondSymbol: "DOTBNB'", firstQuantity: 0.001, secondQuantity: 0.01, thirdQuantity: 0.01  }) },
    { pairName: "BNB→SOL→USDT", first: { symbol: "BNBUSDT"}, second: { symbol: "SOLBNB"}, third:{symbol:"SOLUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BNBUSDT'], pricesSecondCoin: prices['SOLUSDT'], pricesCoinToCoin: prices['SOLBNB'], firstSymbol: "BNBUSDT", secondSymbol: "SOLBNB'", firstQuantity: 0.001, secondQuantity: 0.001, thirdQuantity: 0.001 }) },
    { pairName: "BNB→ADA→USDT", first: { symbol: "BNBUSDT"}, second: { symbol:"ADABNB"}, third: {symbol: "ADAUSDT" }, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BNBUSDT'], pricesSecondCoin: prices['ADAUSDT'], pricesCoinToCoin: prices['ADABNB'], firstSymbol: "BNBUSDT", secondSymbol: "ADABNB'", firstQuantity: 0.001, secondQuantity: 0.1, thirdQuantity: 0.1 }) },
    { pairName: "BNB→TRX→USDT", first: { symbol: "BNBUSDT"}, second: { symbol: "TRXBNB"}, third: { symbol: "TRXUSDT" }, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BNBUSDT'], pricesSecondCoin: prices['TRXUSDT'], pricesCoinToCoin: prices['TRXBNB'], firstSymbol: "BNBUSDT", secondSymbol: "TRXBNB'", firstQuantity: 0.001, secondQuantity: 1, thirdQuantity: 0.1 }) },
    { pairName: "BNB→AVAX→USDT", first: { symbol: "BNBUSDT"}, second: { symbol: "AVAXBNB"}, third: { symbol: "AVAXUSDT" }, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BNBUSDT'], pricesSecondCoin: prices['AVAXUSDT'], pricesCoinToCoin: prices['AVAXBNB'], firstSymbol: "BNBUSDT", secondSymbol: "AVAXBNB'", firstQuantity: 0.001, secondQuantity: 0.01, thirdQuantity: 0.01 }) },
    { pairName: "BNB→SUI→USDT", first: { symbol: "BNBUSDT"}, second: { symbol: "SUIBNB"}, third: { symbol: "SUIUSDT" }, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BNBUSDT'], pricesSecondCoin: prices['SUIUSDT'], pricesCoinToCoin: prices['SUIBNB'], firstSymbol: "BNBUSDT", secondSymbol: "SUIBNB'", firstQuantity: 0.001, secondQuantity: 0.1, thirdQuantity: 0.1 }) },
    { pairName: "BNB→LINK→USDT", first: { symbol: "BNBUSDT"}, second: { symbol: "LINKBNB"}, third: { symbol: "LINKUSDT" }, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BNBUSDT'], pricesSecondCoin: prices['LINKUSDT'], pricesCoinToCoin: prices['LINKBNB'], firstSymbol: "BNBUSDT", secondSymbol: "LINKBNB'", firstQuantity: 0.001, secondQuantity: 0.001, thirdQuantity: 0.01 }) },
    { pairName: "BNB→HBAR→USDT", first: { symbol: "BNBUSDT"}, second: { symbol: "HBARBNB"}, third: { symbol: "HBARUSDT" }, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BNBUSDT'], pricesSecondCoin: prices['HBARUSDT'], pricesCoinToCoin: prices['HBARBNB'], firstSymbol: "BNBUSDT", secondSymbol: "HBARBNB'", firstQuantity: 0.001, secondQuantity: 1, thirdQuantity: 1 }) },
    { pairName: "BNB→BCH→USDT", first: { symbol: "BNBUSDT"}, second: { symbol: "BCHBNB"}, third: { symbol: "BCHUSDT" }, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BNBUSDT'], pricesSecondCoin: prices['BCHUSDT'], pricesCoinToCoin: prices['BCHBNB'], firstSymbol: "BNBUSDT", secondSymbol: "BCHBNB'", firstQuantity: 0.001, secondQuantity: 0.001, thirdQuantity: 0.001 }) },
    { pairName: "BNB→LTC→USDT", first: { symbol: "BNBUSDT"}, second: { symbol: "LTCBNB"}, third: { symbol: "LTCUSDT" }, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BNBUSDT'], pricesSecondCoin: prices['LTCUSDT'], pricesCoinToCoin: prices['LTCBNB'], firstSymbol: "BNBUSDT", secondSymbol: "LTCBNB'", firstQuantity: 0.001, secondQuantity: 0.001, thirdQuantity: 0.001}) },
    { pairName: "BNB→ETC→USDT", first: { symbol: "BNBUSDT"}, second: { symbol: "ETCBNB"}, third: { symbol: "ETCUSDT" }, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BNBUSDT'], pricesSecondCoin: prices['ETCUSDT'], pricesCoinToCoin: prices['ETCBNB'], firstSymbol: "BNBUSDT", secondSymbol: "ETCBNB'", firstQuantity: 0.001, secondQuantity: 0.01, thirdQuantity: 0.01 }) },
    { pairName: "BNB→VET→USDT", first: { symbol: "BNBUSDT"}, second: { symbol: "VETBNB"}, third: { symbol: "VETUSDT" }, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BNBUSDT'], pricesSecondCoin: prices['VETUSDT'], pricesCoinToCoin: prices['VETBNB'], firstSymbol: "BNBUSDT", secondSymbol: "VETBNB'", firstQuantity: 0.001, secondQuantity: 1, thirdQuantity: 0.1 }) },
    { pairName: "BNB→ENA→USDT", first: { symbol: "BNBUSDT"}, second: { symbol: "ENABNB"}, third: { symbol: "ENAUSDT" }, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BNBUSDT'], pricesSecondCoin: prices['ENAUSDT'], pricesCoinToCoin: prices['ENABNB'], firstSymbol: "BNBUSDT", secondSymbol: "ENABNB'", firstQuantity: 0.001, secondQuantity: 0.01, thirdQuantity: 0.01 }) },
    { pairName: "BNB→PENGU→USDT", first: { symbol: "BNBUSDT"}, second: { symbol: "PENGUBNB"}, third: { symbol: "PENGUUSDT" }, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BNBUSDT'], pricesSecondCoin: prices['PENGUUSDT'], pricesCoinToCoin: prices['PENGUBNB'], firstSymbol: "BNBUSDT", secondSymbol: "PENGUBNB'", firstQuantity: 0.001, secondQuantity: 1, thirdQuantity: 1 }) },
    { pairName: "BNB→STX→USDT", first: { symbol: "BNBUSDT"}, second: { symbol: "STXBNB"}, third: { symbol: "STXUSDT" }, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BNBUSDT'], pricesSecondCoin: prices['STXUSDT'], pricesCoinToCoin: prices['STXBNB'], firstSymbol: "BNBUSDT", secondSymbol: "STXBNB'", firstQuantity: 0.001, secondQuantity: 0.1, thirdQuantity: 0.1 }) },
    { pairName: "BNB→INJ→USDT", first: { symbol: "BNBUSDT"}, second: { symbol: "INJBNB"}, third: { symbol: "INJUSDT" }, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BNBUSDT'], pricesSecondCoin: prices['INJUSDT'], pricesCoinToCoin: prices['INJBNB'], firstSymbol: "BNBUSDT", secondSymbol: "INJBNB'", firstQuantity: 0.001, secondQuantity: 0.01, thirdQuantity: 0.01 }) },
    { pairName: "BNB→MOVE→USDT", first: { symbol: "BNBUSDT"}, second: { symbol: "MOVEBNB"}, third: { symbol: "MOVEUSDT" }, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BNBUSDT'], pricesSecondCoin: prices['MOVEUSDT'], pricesCoinToCoin: prices['MOVEBNB'], firstSymbol: "BNBUSDT", secondSymbol: "MOVEBNB'", firstQuantity: 0.001, secondQuantity: 0.1, thirdQuantity: 0.1 }) },
    { pairName: "BNB→SEI→USDT", first: { symbol: "BNBUSDT"}, second: { symbol: "SEIBNB"}, third: { symbol: "SEIUSDT" }, profitInPercentage: calculateProfit({  pricesFirstCoin: prices['BNBUSDT'], pricesSecondCoin: prices['SEIUSDT'], pricesCoinToCoin: prices['SEIBNB'], firstSymbol: "BNBUSDT", secondSymbol: "SEIBNB'", firstQuantity: 0.001, secondQuantity: 0.1, thirdQuantity: 0.1 }) },
    

    // Не готові пари
    /*
    { pairName: "BNB→SEI→USDT", first: { symbol: "BNBUSDT", amount: workingСapital / prices['BNBUSDT'] }, second: { symbol: "SEIBNB", amount: (workingСapital / prices['BNBUSDT']) /  prices['SEIBNB'] }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['BNBUSDT'], pricesSecondCoin: prices['SEIUSDT'], pricesCoinToCoin: prices['SEIBNB'] }) },
    
    // Зворотні пари
    { pairName: "AVAX→BNB→USDT", first: { symbol: "AVAXUSDT", amount: workingСapital / prices['AVAXUSDT'] }, second: { symbol: "AVAXBNB", amount: (workingСapital / prices['AVAXUSDT']) / (1 / prices['AVAXBNB']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['AVAXUSDT'], pricesSecondCoin: prices['BNBUSDT'], pricesCoinToCoin: 1 / prices['AVAXBNB'] }) },
    { pairName: "ETC→BNB→USDT", first: { symbol: "ETCUSDT", amount: workingСapital / prices['ETCUSDT'] }, second: { symbol: "ETCBNB", amount: (workingСapital / prices['ETCUSDT']) /(1 /  prices['ETCBNB']) }, base: { symbol: "USDT" },profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["ETCUSDT"], pricesSecondCoin: prices["BNBUSDT"], pricesCoinToCoin: 1 / prices["ETCBNB"] }) },
    /* { pairName: "XRP→BNB→USDT", first: { symbol: "XRPUSDT", amount: workingСapital / prices['XRPUSDT'] }, second: { symbol: "XRPBNB", amount: (workingСapital / prices['XRPUSDT']) / (1 / prices['XRPBNB']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['XRPUSDT'], pricesSecondCoin: prices['BNBUSDT'], pricesCoinToCoin: 1 / prices['XRPBNB'] }) },
    { pairName: "XRP→ETH→USDT", first: { symbol: "XRPUSDT", amount: workingСapital / prices['XRPUSDT'] }, second: { symbol: "XRPETH", amount: (workingСapital / prices['XRPUSDT']) / (1 / prices['XRPETH']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['XRPUSDT'], pricesSecondCoin: prices['ETHUSDT'], pricesCoinToCoin: 1 / prices['XRPETH'] }) },
    { pairName: "XRP→BTC→USDT", first: { symbol: "XRPUSDT", amount: workingСapital / prices['XRPUSDT'] }, second: { symbol: "XRPBTC", amount: (workingСapital / prices['XRPUSDT']) / (1 / prices['XRPBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['XRPUSDT'], pricesSecondCoin: prices['BTCUSDT'], pricesCoinToCoin: 1 / prices['XRPBTC'] }) },
    { pairName: "DOT→BTC→USDT", first: { symbol: "DOTUSDT", amount: workingСapital / prices['DOTUSDT'] }, second: { symbol: "DOTBTC", amount: (workingСapital / prices['DOTUSDT']) / (1 / prices['DOTBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['DOTUSDT'], pricesSecondCoin: prices['BTCUSDT'], pricesCoinToCoin: 1 / prices['DOTBTC'] }) },
    { pairName: "DOT→ETH→USDT", first: { symbol: "DOTUSDT", amount: workingСapital / prices['DOTUSDT'] }, second: { symbol: "DOTETH", amount: (workingСapital / prices['DOTUSDT']) / (1 / prices['DOTETH']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['DOTUSDT'], pricesSecondCoin: prices['ETHUSDT'], pricesCoinToCoin: 1 / prices['DOTETH'] }) },
    { pairName: "DOT→BNB→USDT", first: { symbol: "DOTUSDT", amount: workingСapital / prices['DOTUSDT'] }, second: { symbol: "DOTBNB", amount: (workingСapital / prices['DOTUSDT']) / (1 / prices['DOTBNB']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['DOTUSDT'], pricesSecondCoin: prices['BNBUSDT'], pricesCoinToCoin: 1 / prices['DOTBNB'] }) },
    { pairName: "SOL→BTC→USDT", first: { symbol: "SOLUSDT", amount: workingСapital / prices['SOLUSDT'] }, second: { symbol: "SOLBTC", amount: (workingСapital / prices['SOLUSDT']) / (1 / prices['SOLBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['SOLUSDT'], pricesSecondCoin: prices['BTCUSDT'], pricesCoinToCoin: 1 / prices['SOLBTC'] }) },
    { pairName: "SOL→ETH→USDT", first: { symbol: "SOLUSDT", amount: workingСapital / prices['SOLUSDT'] }, second: { symbol: "SOLETH", amount: (workingСapital / prices['SOLUSDT']) / (1 / prices['SOLETH']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['SOLUSDT'], pricesSecondCoin: prices['ETHUSDT'], pricesCoinToCoin: 1 / prices['SOLETH'] }) },
    { pairName: "SOL→BNB→USDT", first: { symbol: "SOLUSDT", amount: workingСapital / prices['SOLUSDT'] }, second: { symbol: "SOLBNB", amount: (workingСapital / prices['SOLUSDT']) / (1 / prices['SOLBNB']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['SOLUSDT'], pricesSecondCoin: prices['BNBUSDT'], pricesCoinToCoin: 1 / prices['SOLBNB'] }) },
    { pairName: "ADA→BTC→USDT", first: { symbol: "ADAUSDT", amount: workingСapital / prices['ADAUSDT'] }, second: { symbol: "ADABTC", amount: (workingСapital / prices['ADAUSDT']) / (1 / prices['ADABTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['ADAUSDT'], pricesSecondCoin: prices['BTCUSDT'], pricesCoinToCoin: 1 / prices['ADABTC'] }) },
    { pairName: "ADA→ETH→USDT", first: { symbol: "ADAUSDT", amount: workingСapital / prices['ADAUSDT'] }, second: { symbol: "ADAETH", amount: (workingСapital / prices['ADAUSDT']) / (1 / prices['ADAETH']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['ADAUSDT'], pricesSecondCoin: prices['ETHUSDT'], pricesCoinToCoin: 1 / prices['ADAETH'] }) },
    { pairName: "ADA→BNB→USDT", first: { symbol: "ADAUSDT", amount: workingСapital / prices['ADAUSDT'] }, second: { symbol: "ADABNB", amount: (workingСapital / prices['ADAUSDT']) / (1 / prices['ADABNB']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['ADAUSDT'], pricesSecondCoin: prices['BNBUSDT'], pricesCoinToCoin: 1 / prices['ADABNB'] }) },
    { pairName: "TRX→BTC→USDT", first: { symbol: "TRXUSDT", amount: workingСapital / prices['TRXUSDT'] }, second: { symbol: "TRXBTC", amount: (workingСapital / prices['TRXUSDT']) / (1 / prices['TRXBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['TRXUSDT'], pricesSecondCoin: prices['BTCUSDT'], pricesCoinToCoin: 1 / prices['TRXBTC'] }) },
    { pairName: "TRX→ETH→USDT", first: { symbol: "TRXUSDT", amount: workingСapital / prices['TRXUSDT'] }, second: { symbol: "TRXETH", amount: (workingСapital / prices['TRXUSDT']) / (1 / prices['TRXETH']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['TRXUSDT'], pricesSecondCoin: prices['ETHUSDT'], pricesCoinToCoin: 1 / prices['TRXETH'] }) },
    { pairName: "TRX→BNB→USDT", first: { symbol: "TRXUSDT", amount: workingСapital / prices['TRXUSDT'] }, second: { symbol: "TRXBNB", amount: (workingСapital / prices['TRXUSDT']) / (1 / prices['TRXBNB']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['TRXUSDT'], pricesSecondCoin: prices['BNBUSDT'], pricesCoinToCoin: 1 / prices['TRXBNB'] }) },
    { pairName: "AVAX→BTC→USDT", first: { symbol: "AVAXUSDT", amount: workingСapital / prices['AVAXUSDT'] }, second: { symbol: "AVAXBTC", amount: (workingСapital / prices['AVAXUSDT']) / (1 / prices['AVAXBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['AVAXUSDT'], pricesSecondCoin: prices['BTCUSDT'], pricesCoinToCoin: 1 / prices['AVAXBTC'] }) },
    { pairName: "AVAX→ETH→USDT", first: { symbol: "AVAXUSDT", amount: workingСapital / prices['AVAXUSDT'] }, second: { symbol: "AVAXETH", amount: (workingСapital / prices['AVAXUSDT']) / (1 / prices['AVAXETH']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['AVAXUSDT'], pricesSecondCoin: prices['ETHUSDT'], pricesCoinToCoin: 1 / prices['AVAXETH'] }) },
    
    { pairName: "SUI→BTC→USDT", first: { symbol: "SUIUSDT", amount: workingСapital / prices['SUIUSDT'] }, second: { symbol: "SUIBTC", amount: (workingСapital / prices['SUIUSDT']) / (1 / prices['SUIBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['SUIUSDT'], pricesSecondCoin: prices['BTCUSDT'], pricesCoinToCoin: 1 / prices['SUIBTC'] }) },
    { pairName: "SUI→BNB→USDT", first: { symbol: "SUIUSDT", amount: workingСapital / prices['SUIUSDT'] }, second: { symbol: "SUIBNB", amount: (workingСapital / prices['SUIUSDT']) / (1 / prices['SUIBNB']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['SUIUSDT'], pricesSecondCoin: prices['BNBUSDT'], pricesCoinToCoin: 1 / prices['SUIBNB'] }) },
    { pairName: "LINK→BTC→USDT", first: { symbol: "LINKUSDT", amount: workingСapital / prices['LINKUSDT'] }, second: { symbol: "LINKBTC", amount: (workingСapital / prices['LINKUSDT']) / (1 / prices['LINKBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['LINKUSDT'], pricesSecondCoin: prices['BTCUSDT'], pricesCoinToCoin: 1 / prices['LINKBTC'] }) },
    { pairName: "LINK→ETH→USDT", first: { symbol: "LINKUSDT", amount: workingСapital / prices['LINKUSDT'] }, second: { symbol: "LINKETH", amount: (workingСapital / prices['LINKUSDT']) / (1 / prices['LINKETH']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['LINKUSDT'], pricesSecondCoin: prices['ETHUSDT'], pricesCoinToCoin: 1 / prices['LINKETH'] }) },
    { pairName: "LINK→BNB→USDT", first: { symbol: "LINKUSDT", amount: workingСapital / prices['LINKUSDT'] }, second: { symbol: "LINKBNB", amount: (workingСapital / prices['LINKUSDT']) / (1 / prices['LINKBNB']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['LINKUSDT'], pricesSecondCoin: prices['BNBUSDT'], pricesCoinToCoin: 1 / prices['LINKBNB'] }) },
    { pairName: "TON→BTC→USDT", first: { symbol: "TONUSDT", amount: workingСapital / prices['TONUSDT'] }, second: { symbol: "TONBTC", amount: (workingСapital / prices['TONUSDT']) / (1 / prices['TONBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['TONUSDT'], pricesSecondCoin: prices['BTCUSDT'], pricesCoinToCoin: 1 / prices['TONBTC'] }) },
    { pairName: "SHIB→DOGE→USDT", first: { symbol: "SHIBUSDT", amount: workingСapital / prices['SHIBUSDT'] }, second: { symbol: "SHIBDOGE", amount: (workingСapital / prices['SHIBUSDT']) / (1 / prices['SHIBDOGE']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['SHIBUSDT'], pricesSecondCoin: prices['DOGEUSDT'], pricesCoinToCoin: 1 / prices['SHIBDOGE'] }) },
    { pairName: "DOGE→SHIB→USDT", first: { symbol: "DOGEUSDT", amount: workingСapital / prices['DOGEUSDT'] }, second: { symbol: "SHIBDOGE", amount: (workingСapital / prices['SHIBUSDT']) /  prices['SHIBDOGE'] }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['DOGEUSDT'], pricesSecondCoin: prices['SHIBUSDT'], pricesCoinToCoin: prices['SHIBDOGE'] }) },
    { pairName: "DOGE→BTC→USDT", first: { symbol: "DOGEUSDT", amount: workingСapital / prices['DOGEUSDT'] }, second: { symbol: "DOGEBTC", amount: (workingСapital / prices['DOGEUSDT']) /(1 /  prices['DOGEBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['DOGEUSDT'], pricesSecondCoin: prices['BTCUSDT'], pricesCoinToCoin: 1 / prices['DOGEBTC'] }) },
    { pairName: "XLM→BTC→USDT",  first: { symbol: "XLMUSDT", amount: workingСapital / prices['XLMUSDT'] }, second: { symbol: "XLMBTC", amount: (workingСapital / prices['XLMUSDT']) /(1 /  prices['XLMBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['XLMUSDT'], pricesSecondCoin: prices['BTCUSDT'], pricesCoinToCoin: 1 / prices['XLMBTC'] }) },
    { pairName: "XLM→ETH→USDT",  first: { symbol: "XLMUSDT", amount: workingСapital / prices['XLMUSDT'] }, second: { symbol: "XLMETH", amount: (workingСapital / prices['XLMUSDT']) /(1 /  prices['XLMETH']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['XLMUSDT'], pricesSecondCoin: prices['ETHUSDT'], pricesCoinToCoin: 1 / prices['XLMETH'] }) },
    { pairName: "WBTC→BTC→USDT", first: { symbol: "WBTCUSDT", amount: workingСapital / prices['WBTCUSDT'] }, second: { symbol: "WBTCBTC", amount: (workingСapital / prices['WBTCUSDT']) /(1 /  prices['WBTCBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['WBTCUSDT'], pricesSecondCoin: prices['BTCUSDT'], pricesCoinToCoin: 1 / prices['WBTCBTC'] }) },
    { pairName: "WBTC→ETH→USDT", first: { symbol: "WBTCUSDT", amount: workingСapital / prices['WBTCUSDT'] }, second: { symbol: "WBTCETH", amount: (workingСapital / prices['WBTCUSDT']) /(1 /  prices['WBTCETH']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['WBTCUSDT'], pricesSecondCoin: prices['ETHUSDT'], pricesCoinToCoin: 1 / prices['WBTCETH'] }) },
    { pairName: "HBAR→BTC→USDT", first: { symbol: "HBARUSDT", amount: workingСapital / prices['HBARUSDT'] }, second: { symbol: "HBARBTC", amount: (workingСapital / prices['HBARUSDT']) /(1 /  prices['HBARBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['HBARUSDT'], pricesSecondCoin: prices['BTCUSDT'], pricesCoinToCoin: 1 / prices['HBARBTC'] }) },
    { pairName: "HBAR→BNB→USDT", first: { symbol: "HBARUSDT", amount: workingСapital / prices['HBARUSDT'] }, second: { symbol: "HBARBNB", amount: (workingСapital / prices['HBARUSDT']) /(1 /  prices['HBARBNB']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['HBARUSDT'], pricesSecondCoin: prices['BNBUSDT'], pricesCoinToCoin: 1 / prices['HBARBNB'] }) },
    { pairName: "BCH→BTC→USDT", first: { symbol: "BCHUSDT", amount: workingСapital / prices['BCHUSDT'] }, second: { symbol: "BCHBTC", amount: (workingСapital / prices['BCHUSDT']) /(1 /  prices['BCHBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['BCHUSDT'], pricesSecondCoin: prices['BTCUSDT'], pricesCoinToCoin: 1 / prices['BCHBTC'] }) },
    { pairName: "BCH→BNB→USDT", first: { symbol: "BCHUSDT", amount: workingСapital / prices['BCHUSDT'] }, second: { symbol: "BCHBNB", amount: (workingСapital / prices['BCHUSDT']) /(1 /  prices['BCHBNB']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['BCHUSDT'], pricesSecondCoin: prices['BNBUSDT'], pricesCoinToCoin: 1 / prices['BCHBNB'] }) },
    { pairName: "UNI→BTC→USDT", first: { symbol: "UNIUSDT", amount: workingСapital / prices['UNIUSDT'] }, second: { symbol: "UNIBTC", amount: (workingСapital / prices['UNIUSDT']) /(1 /  prices['UNIBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['UNIUSDT'], pricesSecondCoin: prices['BTCUSDT'], pricesCoinToCoin: 1 / prices['UNIBTC'] }) },
    { pairName: "UNI→ETH→USDT", first: { symbol: "UNIUSDT", amount: workingСapital / prices['UNIUSDT'] }, second: { symbol: "UNIETH", amount: (workingСapital / prices['UNIUSDT']) /(1 /  prices['UNIETH']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['UNIUSDT'], pricesSecondCoin: prices['ETHUSDT'], pricesCoinToCoin: 1 / prices['UNIETH'] }) },
    { pairName: "LTC→BTC→USDT", first: { symbol: "LTCUSDT", amount: workingСapital / prices['LTCUSDT'] }, second: { symbol: "LTCBTC", amount: (workingСapital / prices['LTCUSDT']) /(1 /  prices['LTCBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["LTCUSDT"], pricesSecondCoin: prices["BTCUSDT"], pricesCoinToCoin: 1 / prices["LTCBTC"] }) },
    { pairName: "LTC→ETH→USDT", first: { symbol: "LTCUSDT", amount: workingСapital / prices['LTCUSDT'] }, second: { symbol: "LTCETH", amount: (workingСapital / prices['LTCUSDT']) /(1 /  prices['LTCETH']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["LTCUSDT"], pricesSecondCoin: prices["ETHUSDT"], pricesCoinToCoin: 1 / prices["LTCETH"] }) },
    { pairName: "LTC→BNB→USDT", first: { symbol: "LTCUSDT", amount: workingСapital / prices['LTCUSDT'] }, second: { symbol: "LTCBNB", amount: (workingСapital / prices['LTCUSDT']) /(1 /  prices['LTCBNB']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["LTCUSDT"], pricesSecondCoin: prices["BNBUSDT"], pricesCoinToCoin: 1 / prices["LTCBNB"] }) },
    { pairName: "NEAR→BTC→USDT", first: { symbol: "NEARUSDT", amount: workingСapital / prices['NEARUSDT'] }, second: { symbol: "NEARBTC", amount: (workingСapital / prices['NEARUSDT']) /(1 /  prices['NEARBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["NEARUSDT"], pricesSecondCoin: prices["BTCUSDT"], pricesCoinToCoin: 1 / prices["NEARBTC"] }) },
    { pairName: "NEAR→ETH→USDT", first: { symbol: "NEARUSDT", amount: workingСapital / prices['NEARUSDT'] }, second: { symbol: "NEARETH", amount: (workingСapital / prices['NEARUSDT']) /(1 /  prices['NEARETH']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["NEARUSDT"], pricesSecondCoin: prices["ETHUSDT"], pricesCoinToCoin: 1 / prices["NEARETH"] }) },
    { pairName: "ICP→BTC→USDT", first: { symbol: "ICPUSDT", amount: workingСapital / prices['ICPUSDT'] }, second: { symbol: "ICPBTC", amount: (workingСapital / prices['ICPUSDT']) /(1 /  prices['ICPBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["ICPUSDT"], pricesSecondCoin: prices["BTCUSDT"], pricesCoinToCoin: 1 / prices["ICPBTC"] }) },
    { pairName: "ICP→ETH→USDT", first: { symbol: "ICPUSDT", amount: workingСapital / prices['ICPUSDT'] }, second: { symbol: "ICPETH", amount: (workingСapital / prices['ICPUSDT']) /(1 /  prices['ICPETH']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["ICPUSDT"], pricesSecondCoin: prices["ETHUSDT"], pricesCoinToCoin: 1 / prices["ICPETH"] }) },
    { pairName: "APT→BTC→USDT", first: { symbol: "APTUSDT", amount: workingСapital / prices['APTUSDT'] }, second: { symbol: "APTBTC", amount: (workingСapital / prices['APTUSDT']) /(1 /  prices['APTBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["APTUSDT"], pricesSecondCoin: prices["BTCUSDT"], pricesCoinToCoin: 1 / prices["APTBTC"] }) },
    { pairName: "APT→ETH→USDT", first: { symbol: "APTUSDT", amount: workingСapital / prices['APTUSDT'] }, second: { symbol: "APTETH", amount: (workingСapital / prices['APTUSDT']) / (1 / prices['APTETH']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["APTUSDT"], pricesSecondCoin: prices["ETHUSDT"], pricesCoinToCoin: 1 / prices["APTETH"] }) },
    { pairName: "AAVE→BTC→USDT", first: { symbol: "AAVEUSDT", amount: workingСapital / prices['AAVEUSDT'] }, second: { symbol: "AAVEBTC", amount: (workingСapital / prices['AAVEUSDT']) / (1 / prices['AAVEBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["AAVEUSDT"], pricesSecondCoin: prices["BTCUSDT"], pricesCoinToCoin: 1 / prices["AAVEBTC"] }) },
    { pairName: "AAVE→ETH→USDT", first: { symbol: "AAVEUSDT", amount: workingСapital / prices['AAVEUSDT'] }, second: { symbol: "AAVEETH", amount: (workingСapital / prices['AAVEUSDT']) /(1 /  prices['AAVEETH']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["AAVEUSDT"], pricesSecondCoin: prices["ETHUSDT"], pricesCoinToCoin: 1 / prices["AAVEETH"] }) },
    { pairName: "POL→BTC→USDT", first: { symbol: "POLUSDT", amount: workingСapital / prices['POLUSDT'] }, second: { symbol: "POLBTC", amount: (workingСapital / prices['POLUSDT']) /(1 /  prices['POLBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["POLUSDT"], pricesSecondCoin: prices["BTCUSDT"], pricesCoinToCoin: 1 / prices["POLBTC"] }) },
    { pairName: "POL→ETH→USDT", first: { symbol: "POLUSDT", amount: workingСapital / prices['POLUSDT'] }, second: { symbol: "POLETH", amount: (workingСapital / prices['POLUSDT']) /(1 /  prices['POLETH']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["POLUSDT"], pricesSecondCoin: prices["ETHUSDT"], pricesCoinToCoin: 1 / prices["POLETH"] }) },
    { pairName: "ETC→BTC→USDT", first: { symbol: "ETCUSDT", amount: workingСapital / prices['ETCUSDT'] }, second: { symbol: "ETCBTC", amount: (workingСapital / prices['ETCUSDT']) /(1 /  prices['ETCBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["ETCUSDT"], pricesSecondCoin: prices["BTCUSDT"], pricesCoinToCoin: 1 / prices["ETCBTC"] }) },
    { pairName: "ETC→ETH→USDT", first: { symbol: "ETCUSDT", amount: workingСapital / prices['ETCUSDT'] }, second: { symbol: "ETCETH", amount: (workingСapital / prices['ETCUSDT']) /(1 /  prices['ETCETH']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["ETCUSDT"], pricesSecondCoin: prices["ETHUSDT"], pricesCoinToCoin: 1 / prices["ETCETH"] }) },
    { pairName: "RENDER→BTC→USDT", first: { symbol: "RENDERUSDT", amount: workingСapital / prices['RENDERUSDT'] }, second: { symbol: "RENDERBTC", amount: (workingСapital / prices['RENDERUSDT']) /(1 /  prices['RENDERBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["RENDERUSDT"], pricesSecondCoin: prices["BTCUSDT"], pricesCoinToCoin: 1 / prices["RENDERBTC"] }) },
    { pairName: "ENA→BTC→USDT", first: { symbol: "ENAUSDT", amount: workingСapital / prices['ENAUSDT'] }, second: { symbol: "ENABTC", amount: (workingСapital / prices['ENAUSDT']) /(1 /  prices['ENABTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["ENAUSDT"], pricesSecondCoin: prices["BTCUSDT"], pricesCoinToCoin: 1 / prices["ENABTC"] }) },
    { pairName: "ENA→BNB→USDT", first: { symbol: "ENAUSDT", amount: workingСapital / prices['ENAUSDT'] }, second: { symbol: "ENABNB", amount: (workingСapital / prices['ENAUSDT']) /(1 /  prices['ENABNB']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["ENAUSDT"], pricesSecondCoin: prices["BNBUSDT"], pricesCoinToCoin: 1 / prices["ENABNB"] }) },
    { pairName: "OM→BTC→USDT", first: { symbol: "OMUSDT", amount: workingСapital / prices['OMUSDT'] }, second: { symbol: "OMBTC", amount: (workingСapital / prices['OMUSDT']) /(1 /  prices['OMBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["OMUSDT"], pricesSecondCoin: prices["BTCUSDT"], pricesCoinToCoin: 1 / prices["OMBTC"] }) },
    { pairName: "FIL→BTC→USDT", first: { symbol: "FILUSDT", amount: workingСapital / prices['FILUSDT'] }, second: { symbol: "FILBTC", amount: (workingСapital / prices['FILUSDT']) /(1 /  prices['FILBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["FILUSDT"], pricesSecondCoin: prices["BTCUSDT"], pricesCoinToCoin: 1 / prices["FILBTC"] }) },
    { pairName: "FIL→ETH→USDT", first: { symbol: "FILUSDT", amount: workingСapital / prices['FILUSDT'] }, second: { symbol: "FILETH", amount: (workingСapital / prices['FILUSDT']) /(1 /  prices['FILETH']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["FILUSDT"], pricesSecondCoin: prices["ETHUSDT"], pricesCoinToCoin: 1 / prices["FILETH"] }) },
    { pairName: "ALGO→BTC→USDT", first: { symbol: "ALGOUSDT", amount: workingСapital / prices['ALGOUSDT'] }, second: { symbol: "ALGOBTC", amount: (workingСapital / prices['ALGOUSDT']) /(1 /  prices['ALGOBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["ALGOUSDT"], pricesSecondCoin: prices["BTCUSDT"], pricesCoinToCoin: 1 / prices["ALGOBTC"] }) },
    { pairName: "ATOM→BTC→USDT", first: { symbol: "ATOMUSDT", amount: workingСapital / prices['ATOMUSDT'] }, second: { symbol: "ATOMBTC", amount: (workingСapital / prices['ATOMUSDT']) /(1 /  prices['ATOMBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["ATOMUSDT"], pricesSecondCoin: prices["BTCUSDT"], pricesCoinToCoin: 1 / prices["ATOMBTC"] }) },
    { pairName: "OP→BTC→USDT", first: { symbol: "OPUSDT", amount: workingСapital / prices['OPUSDT'] }, second: { symbol: "OPBTC", amount: (workingСapital / prices['OPUSDT']) /(1 /  prices['OPBTC']) }, base: { symbol: "USDT" },  profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["OPUSDT"], pricesSecondCoin: prices["BTCUSDT"], pricesCoinToCoin: 1 / prices["OPBTC"] }) },
    { pairName: "OP→ETH→USDT", first: { symbol: "OPUSDT", amount: workingСapital / prices['OPUSDT'] }, second: { symbol: "OPETH", amount: (workingСapital / prices['OPUSDT']) /(1 /  prices['OPETH']) }, base: { symbol: "USDT" },profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["OPUSDT"], pricesSecondCoin: prices["ETHUSDT"], pricesCoinToCoin: 1 / prices["OPETH"] }) },
    { pairName: "PENGU→BNB→USDT", first: { symbol: "PENGUUSDT", amount: workingСapital / prices['PENGUUSDT'] }, second: { symbol: "PENGUBNB", amount: (workingСapital / prices['PENGUUSDT']) /(1 /  prices['PENGUBNB']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["PENGUUSDT"], pricesSecondCoin: prices["BNBUSDT"], pricesCoinToCoin: 1 / prices["PENGUBNB"] }) },
    { pairName: "STX→BTC→USDT", first: { symbol: "STXUSDT", amount: workingСapital / prices['STXUSDT'] }, second: { symbol: "STXBTC", amount: (workingСapital / prices['STXUSDT']) /(1 /  prices['STXBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["STXUSDT"], pricesSecondCoin: prices["BTCUSDT"], pricesCoinToCoin: 1 / prices["STXBTC"] }) },
    { pairName: "STX→BNB→USDT", first: { symbol: "STXUSDT", amount: workingСapital / prices['STXUSDT'] }, second: { symbol: "STXBNB", amount: (workingСapital / prices['STXUSDT']) /(1 /  prices['STXBNB']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["STXUSDT"], pricesSecondCoin: prices["BNBUSDT"], pricesCoinToCoin: 1 / prices["STXBNB"] }) },
    { pairName: "TIA→BTC→USDT", first: { symbol: "TIAUSDT", amount: workingСapital / prices['TIAUSDT'] }, second: { symbol: "TIABTC", amount: (workingСapital / prices['TIAUSDT']) /(1 /  prices['TIABTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["TIAUSDT"], pricesSecondCoin: prices["BTCUSDT"], pricesCoinToCoin: 1 / prices["TIABTC"] }) },
    { pairName: "INJ→BTC→USDT", first: { symbol: "INJUSDT", amount: workingСapital / prices['INJUSDT'] }, second: { symbol: "INJBTC", amount: (workingСapital / prices['INJUSDT']) /(1 /  prices['INJBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["INJUSDT"], pricesSecondCoin: prices["BTCUSDT"], pricesCoinToCoin: 1 / prices["INJBTC"] }) },
    { pairName: "INJ→ETH→USDT", first: { symbol: "INJUSDT", amount: workingСapital / prices['INJUSDT'] }, second: { symbol: "INJETH", amount: (workingСapital / prices['INJUSDT']) /(1 /  prices['INJETH']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["INJUSDT"], pricesSecondCoin: prices["ETHUSDT"], pricesCoinToCoin: 1 / prices["INJETH"] }) },
    { pairName: "INJ→BNB→USDT", first: { symbol: "INJUSDT", amount: workingСapital / prices['INJUSDT'] }, second: { symbol: "INJBNB", amount: (workingСapital / prices['INJUSDT']) /(1 /  prices['INJBNB']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["INJUSDT"], pricesSecondCoin: prices["BNBUSDT"], pricesCoinToCoin: 1 / prices["INJBNB"] }) },
    { pairName: "THETA→BTC→USDT", first: { symbol: "THETAUSDT", amount: workingСapital / prices['THETAUSDT'] }, second: { symbol: "THETABTC", amount: (workingСapital / prices['THETAUSDT']) /(1 /  prices['THETABTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["THETAUSDT"], pricesSecondCoin: prices["BTCUSDT"], pricesCoinToCoin: 1 / prices["THETABTC"] }) },
    { pairName: "IMX→BTC→USDT", first: { symbol: "IMXUSDT", amount: workingСapital / prices['IMXUSDT'] }, second: { symbol: "IMXBTC", amount: (workingСapital / prices['IMXUSDT']) /(1 /  prices['IMXBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["IMXUSDT"], pricesSecondCoin: prices["BTCUSDT"], pricesCoinToCoin: 1 / prices["IMXBTC"] }) },
    { pairName: "MOVE→BTC→USDT", first: { symbol: "MOVEUSDT", amount: workingСapital / prices['MOVEUSDT'] }, second: { symbol: "MOVEBTC", amount: (workingСapital / prices['MOVEUSDT']) /(1 /  prices['MOVEBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["MOVEUSDT"], pricesSecondCoin: prices["BTCUSDT"], pricesCoinToCoin: 1 / prices["MOVEBTC"] }) },
    { pairName: "MOVE→BNB→USDT", first: { symbol: "MOVEUSDT", amount: workingСapital / prices['MOVEUSDT'] }, second: { symbol: "MOVEBNB", amount: (workingСapital / prices['MOVEUSDT']) /(1 /  prices['MOVEBNB']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["MOVEUSDT"], pricesSecondCoin: prices["BNBUSDT"], pricesCoinToCoin: 1 / prices["MOVEBNB"] }) },
    { pairName: "GRT→BTC→USDT", first: { symbol: "GRTUSDT", amount: workingСapital / prices['GRTUSDT'] }, second: { symbol: "GRTBTC", amount: (workingСapital / prices['GRTUSDT']) /(1 /  prices['GRTBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["GRTUSDT"], pricesSecondCoin: prices["BTCUSDT"], pricesCoinToCoin: 1 / prices["GRTBTC"] }) },
    { pairName: "GRT→ETH→USDT", first: { symbol: "GRTUSDT", amount: workingСapital / prices['GRTUSDT'] }, second: { symbol: "GRTETH", amount: (workingСapital / prices['GRTUSDT']) /(1 /  prices['GRTETH']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["GRTUSDT"], pricesSecondCoin: prices["ETHUSDT"], pricesCoinToCoin: 1 / prices["GRTETH"] }) },
    { pairName: "WLD→BTC→USDT", first: { symbol: "WLDUSDT", amount: workingСapital / prices['WLDUSDT'] }, second: { symbol: "WLDBTC", amount: (workingСapital / prices['WLDUSDT']) /(1 /  prices['WLDBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["WLDUSDT"], pricesSecondCoin: prices["BTCUSDT"], pricesCoinToCoin: 1 / prices["WLDBTC"] }) },
    { pairName: "FTM→BTC→USDT", first: { symbol: "FTMUSDT", amount: workingСapital / prices['FTMUSDT'] }, second: { symbol: "FTMBTC", amount: (workingСapital / prices['FTMUSDT']) /(1 /  prices['FTMBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["FTMUSDT"], pricesSecondCoin: prices["BTCUSDT"], pricesCoinToCoin: 1 / prices["FTMBTC"] }) },
    { pairName: "FTM→ETH→USDT", first: { symbol: "FTMUSDT", amount: workingСapital / prices['FTMUSDT'] }, second: { symbol: "FTMETH", amount: (workingСapital / prices['FTMUSDT']) /(1 /  prices['FTMETH']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["FTMUSDT"], pricesSecondCoin: prices["ETHUSDT"], pricesCoinToCoin: 1 / prices["FTMETH"] }) },
    { pairName: "FTM→BNB→USDT", first: { symbol: "FTMUSDT", amount: workingСapital / prices['FTMUSDT'] }, second: { symbol: "FTMBNB", amount: (workingСapital / prices['FTMUSDT']) /(1 /  prices['FTMBNB']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["FTMUSDT"], pricesSecondCoin: prices["BNBUSDT"], pricesCoinToCoin: 1 / prices["FTMBNB"] }) },
    { pairName: "WIF→BTC→USDT", first: { symbol: "WIFUSDT", amount: workingСapital / prices['WIFUSDT'] }, second: { symbol: "WIFBTC", amount: (workingСapital / prices['WIFUSDT']) /(1 /  prices['WIFBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["WIFUSDT"], pricesSecondCoin: prices["BTCUSDT"], pricesCoinToCoin: 1 / prices["WIFBTC"] }) },
    { pairName: "SEI→BTC→USDT", first: { symbol: "SEIUSDT", amount: workingСapital / prices['SEIUSDT'] }, second: { symbol: "SEIBTC", amount: (workingСapital / prices['SEIUSDT']) /(1 /  prices['SEIBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["SEIUSDT"], pricesSecondCoin: prices["BTCUSDT"], pricesCoinToCoin: 1 / prices["SEIBTC"] }) },
    { pairName: "SEI→BNB→USDT", first: { symbol: "SEIUSDT", amount: workingСapital / prices['SEIUSDT'] }, second: { symbol: "SEIBNB", amount: (workingСapital / prices['SEIUSDT']) /(1 /  prices['SEIBNB']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["SEIUSDT"], pricesSecondCoin: prices["BNBUSDT"], pricesCoinToCoin: 1 / prices["SEIBNB"] }) },
    { pairName: "LDO→BTC→USDT", first: { symbol: "LDOUSDT", amount: workingСapital / prices['LDOUSDT'] }, second: { symbol: "LDOBTC", amount: (workingСapital / prices['LDOUSDT']) /(1 /  prices['LDOBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["LDOUSDT"], pricesSecondCoin: prices["BTCUSDT"], pricesCoinToCoin: 1 / prices["LDOBTC"] }) },
    { pairName: "SAND→BTC→USDT", first: { symbol: "SANDUSDT", amount: workingСapital / prices['SANDUSDT'] }, second: { symbol: "SANDBTC", amount: (workingСapital / prices['SANDUSDT']) /(1 /  prices['SANDBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["SANDUSDT"], pricesSecondCoin: prices["BTCUSDT"], pricesCoinToCoin: 1 / prices["SANDBTC"] }) },
  */
    // Виключення прямі пари
  /*  { pairName: "DAI→BTC→USDT", first: { symbol: "DAIUSDT", amount: workingСapital / prices['DAIUSDT'] }, second: { symbol: "BTCDAI", amount: (workingСapital / prices['DAIUSDT']) /  prices['BTCDAI'] }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["USDTDAI"], pricesSecondCoin: prices["BTCUSDT"], pricesCoinToCoin: prices["BTCDAI"] }) },
    { pairName: "DAI→ETH→USDT", first: { symbol: "DAIUSDT", amount: workingСapital / prices['DAIUSDT'] }, second: { symbol: "ETHDAI", amount: (workingСapital / prices['DAIUSDT']) /  prices['ETHDAI'] }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["USDTDAI"], pricesSecondCoin: prices["ETHUSDT"], pricesCoinToCoin: prices["ETHDAI"] }) },
     // Це було колись FTM тепер це S можливо ще не внесли зміни { pairName: "BTC→S→USDT", first: {symbol:"BTCUSDT"}, second: {symbol:"SBTC"}, third:{symbol:"SUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["BTCUSDT"], pricesSecondCoin: prices["SUSDT"], pricesCoinToCoin: prices['SBTC'], firstSymbol: "BTCUSDT", secondSymbol: "SBTC", firstQuantity: 0.00001, secondQuantity: 0.1, thirdQuantity: 0.1 }) },
    { pairName: "ETH→FTM→USDT", first: {symbol:"ETHUSDT"}, second: {symbol:"SETH"}, third:{symbol:"SUSDT"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices["ETHUSDT"], pricesSecondCoin: prices["SUSDT"], pricesCoinToCoin: prices['SETH'], firstSymbol: "ETHUSDT", secondSymbol: "SETH'", firstQuantity: 0.0001, secondQuantity: 1, thirdQuantity: 1 }) },
    { pairName: "BNB→FTM→USDT", first: { symbol: "BNBUSDT"}, second: { symbol: "SBNB"}, third: { symbol: "SUSDT" }, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BNBUSDT'], pricesSecondCoin: prices['SUSDT'], pricesCoinToCoin: prices['SBNB'], firstSymbol: "BNBUSDT", secondSymbol: "SBNB'", firstQuantity: 0.001, secondQuantity: 0.1, thirdQuantity: 0.1 }) },
    
    */  
    // Виключення зворотні пари
   /* { pairName: "ETH→BTC→USDT", first: { symbol: "ETHUSDT", amount: workingСapital / prices['ETHUSDT'] }, second: { symbol: "ETHBTC", amount: (workingСapital / prices['ETHUSDT']) / (1 / prices['ETHBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['ETHUSDT'], pricesSecondCoin: prices['BTCUSDT'], pricesCoinToCoin: 1 / prices['ETHBTC'] }) },
   // { pairName: "ETH→DAI→USDT", first: { symbol: "ETHUSDT", amount: workingСapital / prices['ETHUSDT'] }, second: { symbol: "ETHDAI", amount: (workingСapital / prices['ETHUSDT']) /(1 /prices['ETHDAI'])  }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices["ETHUSDT"], pricesSecondCoin: prices["USDTDAI"], pricesCoinToCoin: 1 / prices['ETHDAI'] }) },
    { pairName: "BNB→ETH→USDT", first: { symbol: "BNBUSDT", amount: workingСapital / prices['BNBUSDT'] }, second: { symbol: "BNBETH", amount: (workingСapital / prices['BNBUSDT']) / (1 / prices['BNBETH']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['BNBUSDT'], pricesSecondCoin: prices['ETHUSDT'], pricesCoinToCoin: 1 / prices['BNBETH'] }) },
    { pairName: "BNB→BTC→USDT", first: { symbol: "BNBUSDT", amount: workingСapital / prices['BNBUSDT'] }, second: { symbol: "BNBBTC", amount: (workingСapital / prices['BNBUSDT']) / (1 / prices['BNBBTC']) }, base: { symbol: "USDT" }, profitInPercentage: calculateProfit({ workingСapital, pricesFirstCoin: prices['BNBUSDT'], pricesSecondCoin: prices['BTCUSDT'], pricesCoinToCoin: 1 / prices['BNBBTC'] }) },
    { pairName: "BTC→DAI→USDT", first: {symbol:"BTCUSDT"}, second: {symbol:"BTCDAI"}, third:{symbol:"USDTDAI"}, profitInPercentage: calculateProfit({ pricesFirstCoin: prices['BTCUSDT'], pricesSecondCoin: prices['USDTDAI'], pricesCoinToCoin: prices['BTCDAI'], firstSymbol: "BTCUSDT", secondSymbol: "BTCDAI", firstQuantity: 0.00001, secondQuantity: 0.00001, thirdQuantity: 0.01 }) },
    */];

 // console.log(pairs);
  const profitablePairs = pairs.filter(pair => pair.profitInPercentage > 0).sort((a, b) => b.profitInPercentage - a.profitInPercentage);

  return profitablePairs;
}
